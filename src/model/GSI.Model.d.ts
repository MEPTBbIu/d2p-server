/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A single Message or an array of Messages
 */

import {GsiGameRulesState, GsiPlayerTeam, NpcDotaHero, NpcDotaHeroAbility, NpcDotaItems} from "./GSI_Enums";

export type GsiModel =
  | GsiGameState
  | {
      $schema?: string;
      [k: string]: any;
    };
export type GsiPlayerActivity = "playing" | "menu" | "undefined";
/**
 * ID приложения Steam отдающего даные. 570 - Dota 2, 571 - Dota 2 Test, 0 - Эмулятор
 */
export type AppSteamId = 570 | 571 | 0;
/**
 * Steam App Name
 */
export type AppName = "Dota 2" | "Dota 2 Test" | "Emulator";

export interface GsiGameState {
  abilities?: GsiHeroAbilities;
  auth?: GsiAuth;
  hero?: GsiHero;
  items?: GsiPlayerItems;
  map?: GsiMap;
  player?: GsiPlayer;
  previously?: GsiPreviousGameState;
  provider?: GsiProvider;
  draft?: {
    [k: string]: any;
  };
  wearables?: GsiWearables;
  buildings?: GsiBuildings;
}
export interface GsiHeroAbilities {
  ability0?: GsiAbilityBase;
  ability1?: GsiAbilityBase;
  ability2?: GsiAbilityBase;
  ability3?: GsiAbilityBase;
}
export interface GsiAbilityBase {
  ability_active?: boolean;
  can_cast?: boolean;
  cooldown?: number;
  level?: number;
  name:NpcDotaHeroAbility;
  passive?: boolean;
  ultimate?: boolean;
}
export interface GsiAuth {
  token?: string;
}
export interface GsiHero {
  alive?: boolean;
  break?: boolean;
  buyback_cooldown?: number;
  buyback_cost?: number;
  disarmed?: boolean;
  has_debuff?: boolean;
  health?: number;
  health_percent?: number;
  hexed?: boolean;
  id?: number;
  level?: number;
  magicimmune?: boolean;
  mana?: number;
  mana_percent?: number;
  max_health?: number;
  max_mana?: number;
  muted?: boolean;
  name?: NpcDotaHero;
  respawn_seconds?: number;
  silenced?: boolean;
  stunned?: boolean;
  xpos?: number;
  ypos?: number;
}
export interface GsiPlayerItems {
  slot0?: GsiItemBase;
  slot1?: GsiItemBase;
  slot2?: GsiItemBase;
  slot3?: GsiItemBase;
  slot4?: GsiItemBase;
  slot5?: GsiItemBase;
  slot6?: GsiItemBase;
  slot7?: GsiItemBase;
  slot8?: GsiItemBase;
  stash0?: GsiItemBase;
  stash1?: GsiItemBase;
  stash2?: GsiItemBase;
  stash3?: GsiItemBase;
  stash4?: GsiItemBase;
  stash5?: GsiItemBase;
}
export interface GsiItemBase {
  can_cast?: boolean;
  charges?: number;
  contains_rune?: boolean;
  cooldown?: number;
  name: NpcDotaItems;
  passive?: boolean;
  purchaser?: number;
  [k: string]: any;
}
/**
 * GSI.Map
 */
export interface GsiMap {
  clock_time?: number;
  customgamename?: string;
  daytime?: boolean;
  /**
   * GSI.GameRulesState
   */
  game_state?: GsiGameRulesState;
  game_time?: number;
  matchid?: number;
  name?: string;
  nightstalker_night?: boolean;
  paused?: boolean;
  ward_purchase_cooldown?: number;
  win_team?: "dire" | "radiant" | "none" | "undefined";
}
export interface GsiPlayer {
  activity?: GsiPlayerActivity;
  assists?: number;
  deaths?: number;
  denies?: number;
  gold?: number;
  gold_reliable?: number;
  gold_unreliable?: number;
  gpm?: number;
  kill_list?: {
    [k: string]: any;
  };
  kill_streak?: number;
  kills?: number;
  last_hits?: number;
  name?: string;
  pro_name?: string;
  steamid?: string;
  team_name?: GsiPlayerTeam;
  xpm?: number;
}
export interface GsiPreviousGameState {
  abilities?: boolean | GsiHeroAbilities;
  auth?: boolean | GsiAuth;
  hero?: boolean | GsiHero;
  items?: boolean | GsiPlayerItems;
  map?: boolean | GsiMap;
  player?: boolean | GsiPlayer;
  provider?: boolean | GsiProvider;
  draft?:
    | boolean
    | {
        [k: string]: any;
      };
  wearables?: boolean | GsiWearables;
  buildings?: boolean | GsiBuildings;
}
/**
 * Провайдер предоставляющий даные.
 */
export interface GsiProvider {
  appid: AppSteamId;
  name: AppName;
  timestamp: number;
  /**
   * Версия протокола клиента.
   */
  version: 46;
}
export interface GsiWearables {
  [k: string]: any;
}
export interface GsiBuildings {
  radiant?: GsiRadiantBuilding;
}
export interface GsiRadiantBuilding {
  dota_goodguys_tower1_top?: GsiBuilding;
  dota_goodguys_tower2_top?: GsiBuilding;
  dota_goodguys_tower3_top?: GsiBuilding;
  dota_goodguys_tower1_mid?: GsiBuilding;
  dota_goodguys_tower2_mid?: GsiBuilding;
  dota_goodguys_tower3_mid?: GsiBuilding;
  dota_goodguys_tower1_bot?: GsiBuilding;
  dota_goodguys_tower2_bot?: GsiBuilding;
  dota_goodguys_tower3_bot?: GsiBuilding;
  dota_goodguys_tower4_top?: GsiBuilding;
  dota_goodguys_tower4_bot?: GsiBuilding;
  good_rax_melee_top?: GsiBuilding;
  good_rax_range_top?: GsiBuilding;
  good_rax_melee_mid?: GsiBuilding;
  good_rax_range_mid?: GsiBuilding;
  good_rax_melee_bot?: GsiBuilding;
  good_rax_range_bot?: GsiBuilding;
  dota_goodguys_fort?: GsiBuilding;
}
export interface GsiBuilding {
  health?: number;
  max_health?: number;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[0-9]{4}".
 */
export interface GsiGameState1 {
  abilities?: GsiHeroAbilities;
  auth?: GsiAuth;
  hero?: GsiHero;
  items?: GsiPlayerItems;
  map?: GsiMap;
  player?: GsiPlayer;
  previously?: GsiPreviousGameState;
  provider?: GsiProvider;
  draft?: {
    [k: string]: any;
  };
  wearables?: GsiWearables;
  buildings?: GsiBuildings;
}
